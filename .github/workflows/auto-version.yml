name: Auto Version

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  version:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'chore: bump version')"
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install semantic-release
        run: |
          npm install -g semantic-release @semantic-release/changelog @semantic-release/git @semantic-release/github

      - name: Create semantic-release config
        run: |
          cat > .releaserc.json << 'EOF'
          {
            "branches": ["main"],
            "plugins": [
              "@semantic-release/commit-analyzer",
              "@semantic-release/release-notes-generator",
              ["@semantic-release/changelog", {
                "changelogFile": "CHANGELOG.md"
              }],
              ["@semantic-release/git", {
                "assets": ["CHANGELOG.md", "internal/config/config.go"],
                "message": "chore: bump version to ${nextRelease.version} [skip ci]\n\n${nextRelease.notes}"
              }],
              ["@semantic-release/github", {
                "assets": []
              }]
            ]
          }
          EOF

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25'

      - name: Run semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Custom script to update version in Go code
          cat > update-version.js << 'EOF'
          const fs = require('fs');
          
          module.exports = {
            prepare: (pluginConfig, context) => {
              const { nextRelease } = context;
              const version = nextRelease.version;
              
              // Update version in config.go
              const configPath = 'internal/config/config.go';
              let content = fs.readFileSync(configPath, 'utf8');
              // Only replace the Server Version field, not APIVersion
              content = content.replace(
                /(Server:\s*ServerConfig\s*{[^}]*Version:\s*)"[^"]*"/s,
                `$1"${version}"`
              );
              fs.writeFileSync(configPath, content);
              
              console.log(`Updated version to ${version} in ${configPath}`);
            }
          };
          EOF
          
          # Add custom plugin to config
          cat > .releaserc.json << 'EOF'
          {
            "branches": ["main"],
            "plugins": [
              "@semantic-release/commit-analyzer",
              "@semantic-release/release-notes-generator",
              ["@semantic-release/changelog", {
                "changelogFile": "CHANGELOG.md"
              }],
              ["./update-version.js"],
              ["@semantic-release/git", {
                "assets": ["CHANGELOG.md", "internal/config/config.go"],
                "message": "chore: bump version to ${nextRelease.version} [skip ci]\n\n${nextRelease.notes}"
              }],
              ["@semantic-release/github", {
                "assets": []
              }]
            ]
          }
          EOF
          
          # Run semantic-release with custom build step
          npx semantic-release
          
          # Get the version that was just released
          VERSION=$(git describe --tags --abbrev=0)
          echo "Released version: $VERSION"
          
          # Build binaries if a new version was created
          if [ -n "$VERSION" ] && [ "$VERSION" != "$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo '')" ]; then
            echo "Building binaries for version $VERSION"
            
            # Create build directory
            mkdir -p build
            
            # Build for multiple platforms
            VERSION_NO_V=${VERSION#v}
            GOOS=linux GOARCH=amd64 go build -ldflags "-X main.version=${VERSION}" -o build/mcp-defect-dojo-linux-amd64 ./cmd/mcp-server
            GOOS=linux GOARCH=arm64 go build -ldflags "-X main.version=${VERSION}" -o build/mcp-defect-dojo-linux-arm64 ./cmd/mcp-server
            GOOS=darwin GOARCH=amd64 go build -ldflags "-X main.version=${VERSION}" -o build/mcp-defect-dojo-darwin-amd64 ./cmd/mcp-server
            GOOS=darwin GOARCH=arm64 go build -ldflags "-X main.version=${VERSION}" -o build/mcp-defect-dojo-darwin-arm64 ./cmd/mcp-server
            GOOS=windows GOARCH=amd64 go build -ldflags "-X main.version=${VERSION}" -o build/mcp-defect-dojo-windows-amd64.exe ./cmd/mcp-server
            
            # Create checksums
            cd build
            sha256sum * > checksums.txt
            cd ..
            
            # Update the release with binaries
            gh release upload "$VERSION" build/* --clobber
            
            echo "Binaries uploaded to release $VERSION"
          else
            echo "No new version was released"
          fi
